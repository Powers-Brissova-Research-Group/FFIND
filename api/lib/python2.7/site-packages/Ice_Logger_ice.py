# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `Logger.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Ice
_M_Ice = Ice.openModule('Ice')
__name__ = 'Ice'

if 'Logger' not in _M_Ice.__dict__:
    _M_Ice.Logger = Ice.createTempClass()
    class Logger(object):
        """
        The Ice message logger. Applications can provide their own logger
        by implementing this interface and installing it in a communicator.
        """
        def __init__(self):
            if Ice.getType(self) == _M_Ice.Logger:
                raise RuntimeError('Ice.Logger is an abstract class')

        def _print(self, message):
            """
            Print a message. The message is printed literally, without
            any decorations such as executable name or time stamp.
            Arguments:
            message -- 
            """
            pass

        def trace(self, category, message):
            """
            Log a trace message.
            Arguments:
            category -- The trace category.
            message -- The trace message to log.
            """
            pass

        def warning(self, message):
            """
            Log a warning message.
            Arguments:
            message -- The warning message to log.
            """
            pass

        def error(self, message):
            """
            Log an error message.
            Arguments:
            message -- The error message to log.
            """
            pass

        def getPrefix(self):
            """
            Returns this logger's prefix.
            Returns: The prefix.
            """
            pass

        def cloneWithPrefix(self, prefix):
            """
            Returns a clone of the logger with a new prefix.
            Arguments:
            prefix -- The new prefix for the logger.
            """
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_Logger)

        __repr__ = __str__

    _M_Ice._t_Logger = IcePy.defineClass('::Ice::Logger', Logger, -1, (), True, False, None, (), ())
    Logger._ice_type = _M_Ice._t_Logger

    _M_Ice.Logger = Logger
    del Logger

# End of module Ice
