# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `Exception.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice_Identity_ice
import Ice_BuiltinSequences_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module IceGrid
_M_IceGrid = Ice.openModule('IceGrid')
__name__ = 'IceGrid'

if 'ApplicationNotExistException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ApplicationNotExistException = Ice.createTempClass()
    class ApplicationNotExistException(Ice.UserException):
        """
        This exception is raised if an application does not exist.
        Members:
        name -- The name of the application.
        """
        def __init__(self, name=''):
            self.name = name

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ApplicationNotExistException'

    _M_IceGrid._t_ApplicationNotExistException = IcePy.defineException('::IceGrid::ApplicationNotExistException', ApplicationNotExistException, (), False, None, (('name', (), IcePy._t_string, False, 0),))
    ApplicationNotExistException._ice_type = _M_IceGrid._t_ApplicationNotExistException

    _M_IceGrid.ApplicationNotExistException = ApplicationNotExistException
    del ApplicationNotExistException

if 'ServerNotExistException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ServerNotExistException = Ice.createTempClass()
    class ServerNotExistException(Ice.UserException):
        """
        This exception is raised if a server does not exist.
        Members:
        id -- The identifier of the server.
        """
        def __init__(self, id=''):
            self.id = id

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ServerNotExistException'

    _M_IceGrid._t_ServerNotExistException = IcePy.defineException('::IceGrid::ServerNotExistException', ServerNotExistException, (), False, None, (('id', (), IcePy._t_string, False, 0),))
    ServerNotExistException._ice_type = _M_IceGrid._t_ServerNotExistException

    _M_IceGrid.ServerNotExistException = ServerNotExistException
    del ServerNotExistException

if 'ServerStartException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ServerStartException = Ice.createTempClass()
    class ServerStartException(Ice.UserException):
        """
        This exception is raised if a server failed to start.
        Members:
        id -- The identifier of the server.
        reason -- The reason for the failure.
        """
        def __init__(self, id='', reason=''):
            self.id = id
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ServerStartException'

    _M_IceGrid._t_ServerStartException = IcePy.defineException('::IceGrid::ServerStartException', ServerStartException, (), False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    ServerStartException._ice_type = _M_IceGrid._t_ServerStartException

    _M_IceGrid.ServerStartException = ServerStartException
    del ServerStartException

if 'ServerStopException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ServerStopException = Ice.createTempClass()
    class ServerStopException(Ice.UserException):
        """
        This exception is raised if a server failed to stop.
        Members:
        id -- The identifier of the server.
        reason -- The reason for the failure.
        """
        def __init__(self, id='', reason=''):
            self.id = id
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ServerStopException'

    _M_IceGrid._t_ServerStopException = IcePy.defineException('::IceGrid::ServerStopException', ServerStopException, (), False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    ServerStopException._ice_type = _M_IceGrid._t_ServerStopException

    _M_IceGrid.ServerStopException = ServerStopException
    del ServerStopException

if 'AdapterNotExistException' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdapterNotExistException = Ice.createTempClass()
    class AdapterNotExistException(Ice.UserException):
        """
        This exception is raised if an adapter does not exist.
        Members:
        id -- The id of the object adapter.
        """
        def __init__(self, id=''):
            self.id = id

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::AdapterNotExistException'

    _M_IceGrid._t_AdapterNotExistException = IcePy.defineException('::IceGrid::AdapterNotExistException', AdapterNotExistException, (), False, None, (('id', (), IcePy._t_string, False, 0),))
    AdapterNotExistException._ice_type = _M_IceGrid._t_AdapterNotExistException

    _M_IceGrid.AdapterNotExistException = AdapterNotExistException
    del AdapterNotExistException

if 'ObjectExistsException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ObjectExistsException = Ice.createTempClass()
    class ObjectExistsException(Ice.UserException):
        """
        This exception is raised if an object already exists.
        Members:
        id -- The identity of the object.
        """
        def __init__(self, id=Ice._struct_marker):
            if id is Ice._struct_marker:
                self.id = _M_Ice.Identity()
            else:
                self.id = id

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ObjectExistsException'

    _M_IceGrid._t_ObjectExistsException = IcePy.defineException('::IceGrid::ObjectExistsException', ObjectExistsException, (), False, None, (('id', (), _M_Ice._t_Identity, False, 0),))
    ObjectExistsException._ice_type = _M_IceGrid._t_ObjectExistsException

    _M_IceGrid.ObjectExistsException = ObjectExistsException
    del ObjectExistsException

if 'ObjectNotRegisteredException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ObjectNotRegisteredException = Ice.createTempClass()
    class ObjectNotRegisteredException(Ice.UserException):
        """
        This exception is raised if an object is not registered.
        Members:
        id -- The identity of the object.
        """
        def __init__(self, id=Ice._struct_marker):
            if id is Ice._struct_marker:
                self.id = _M_Ice.Identity()
            else:
                self.id = id

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ObjectNotRegisteredException'

    _M_IceGrid._t_ObjectNotRegisteredException = IcePy.defineException('::IceGrid::ObjectNotRegisteredException', ObjectNotRegisteredException, (), False, None, (('id', (), _M_Ice._t_Identity, False, 0),))
    ObjectNotRegisteredException._ice_type = _M_IceGrid._t_ObjectNotRegisteredException

    _M_IceGrid.ObjectNotRegisteredException = ObjectNotRegisteredException
    del ObjectNotRegisteredException

if 'NodeNotExistException' not in _M_IceGrid.__dict__:
    _M_IceGrid.NodeNotExistException = Ice.createTempClass()
    class NodeNotExistException(Ice.UserException):
        """
        This exception is raised if a node does not exist.
        Members:
        name -- The node name.
        """
        def __init__(self, name=''):
            self.name = name

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::NodeNotExistException'

    _M_IceGrid._t_NodeNotExistException = IcePy.defineException('::IceGrid::NodeNotExistException', NodeNotExistException, (), False, None, (('name', (), IcePy._t_string, False, 0),))
    NodeNotExistException._ice_type = _M_IceGrid._t_NodeNotExistException

    _M_IceGrid.NodeNotExistException = NodeNotExistException
    del NodeNotExistException

if 'RegistryNotExistException' not in _M_IceGrid.__dict__:
    _M_IceGrid.RegistryNotExistException = Ice.createTempClass()
    class RegistryNotExistException(Ice.UserException):
        """
        This exception is raised if a registry does not exist.
        Members:
        name -- The registry name.
        """
        def __init__(self, name=''):
            self.name = name

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::RegistryNotExistException'

    _M_IceGrid._t_RegistryNotExistException = IcePy.defineException('::IceGrid::RegistryNotExistException', RegistryNotExistException, (), False, None, (('name', (), IcePy._t_string, False, 0),))
    RegistryNotExistException._ice_type = _M_IceGrid._t_RegistryNotExistException

    _M_IceGrid.RegistryNotExistException = RegistryNotExistException
    del RegistryNotExistException

if 'DeploymentException' not in _M_IceGrid.__dict__:
    _M_IceGrid.DeploymentException = Ice.createTempClass()
    class DeploymentException(Ice.UserException):
        """
        An exception for deployment errors.
        Members:
        reason -- The reason for the failure.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::DeploymentException'

    _M_IceGrid._t_DeploymentException = IcePy.defineException('::IceGrid::DeploymentException', DeploymentException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    DeploymentException._ice_type = _M_IceGrid._t_DeploymentException

    _M_IceGrid.DeploymentException = DeploymentException
    del DeploymentException

if 'NodeUnreachableException' not in _M_IceGrid.__dict__:
    _M_IceGrid.NodeUnreachableException = Ice.createTempClass()
    class NodeUnreachableException(Ice.UserException):
        """
        This exception is raised if a node could not be reached.
        Members:
        name -- The name of the node that is not reachable.
        reason -- The reason why the node couldn't be reached.
        """
        def __init__(self, name='', reason=''):
            self.name = name
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::NodeUnreachableException'

    _M_IceGrid._t_NodeUnreachableException = IcePy.defineException('::IceGrid::NodeUnreachableException', NodeUnreachableException, (), False, None, (
        ('name', (), IcePy._t_string, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    NodeUnreachableException._ice_type = _M_IceGrid._t_NodeUnreachableException

    _M_IceGrid.NodeUnreachableException = NodeUnreachableException
    del NodeUnreachableException

if 'ServerUnreachableException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ServerUnreachableException = Ice.createTempClass()
    class ServerUnreachableException(Ice.UserException):
        """
        This exception is raised if a server could not be reached.
        Members:
        name -- The id of the server that is not reachable.
        reason -- The reason why the server couldn't be reached.
        """
        def __init__(self, name='', reason=''):
            self.name = name
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ServerUnreachableException'

    _M_IceGrid._t_ServerUnreachableException = IcePy.defineException('::IceGrid::ServerUnreachableException', ServerUnreachableException, (), False, None, (
        ('name', (), IcePy._t_string, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    ServerUnreachableException._ice_type = _M_IceGrid._t_ServerUnreachableException

    _M_IceGrid.ServerUnreachableException = ServerUnreachableException
    del ServerUnreachableException

if 'RegistryUnreachableException' not in _M_IceGrid.__dict__:
    _M_IceGrid.RegistryUnreachableException = Ice.createTempClass()
    class RegistryUnreachableException(Ice.UserException):
        """
        This exception is raised if a registry could not be reached.
        Members:
        name -- The name of the registry that is not reachable.
        reason -- The reason why the registry couldn't be reached.
        """
        def __init__(self, name='', reason=''):
            self.name = name
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::RegistryUnreachableException'

    _M_IceGrid._t_RegistryUnreachableException = IcePy.defineException('::IceGrid::RegistryUnreachableException', RegistryUnreachableException, (), False, None, (
        ('name', (), IcePy._t_string, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    RegistryUnreachableException._ice_type = _M_IceGrid._t_RegistryUnreachableException

    _M_IceGrid.RegistryUnreachableException = RegistryUnreachableException
    del RegistryUnreachableException

if 'BadSignalException' not in _M_IceGrid.__dict__:
    _M_IceGrid.BadSignalException = Ice.createTempClass()
    class BadSignalException(Ice.UserException):
        """
        This exception is raised if an unknown signal was sent to
        to a server.
        Members:
        reason -- The details of the unknown signal.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::BadSignalException'

    _M_IceGrid._t_BadSignalException = IcePy.defineException('::IceGrid::BadSignalException', BadSignalException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    BadSignalException._ice_type = _M_IceGrid._t_BadSignalException

    _M_IceGrid.BadSignalException = BadSignalException
    del BadSignalException

if 'PatchException' not in _M_IceGrid.__dict__:
    _M_IceGrid.PatchException = Ice.createTempClass()
    class PatchException(Ice.UserException):
        """
        This exception is raised if a patch failed.
        Members:
        reasons -- The reasons why the patch failed.
        """
        def __init__(self, reasons=None):
            self.reasons = reasons

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::PatchException'

    _M_IceGrid._t_PatchException = IcePy.defineException('::IceGrid::PatchException', PatchException, (), False, None, (('reasons', (), _M_Ice._t_StringSeq, False, 0),))
    PatchException._ice_type = _M_IceGrid._t_PatchException

    _M_IceGrid.PatchException = PatchException
    del PatchException

if 'AccessDeniedException' not in _M_IceGrid.__dict__:
    _M_IceGrid.AccessDeniedException = Ice.createTempClass()
    class AccessDeniedException(Ice.UserException):
        """
        This exception is raised if a registry lock wasn't
        acquired or is already held by a session.
        Members:
        lockUserId -- The id of the user holding the lock (if any).
        """
        def __init__(self, lockUserId=''):
            self.lockUserId = lockUserId

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::AccessDeniedException'

    _M_IceGrid._t_AccessDeniedException = IcePy.defineException('::IceGrid::AccessDeniedException', AccessDeniedException, (), False, None, (('lockUserId', (), IcePy._t_string, False, 0),))
    AccessDeniedException._ice_type = _M_IceGrid._t_AccessDeniedException

    _M_IceGrid.AccessDeniedException = AccessDeniedException
    del AccessDeniedException

if 'AllocationException' not in _M_IceGrid.__dict__:
    _M_IceGrid.AllocationException = Ice.createTempClass()
    class AllocationException(Ice.UserException):
        """
        This exception is raised if the allocation of an object failed.
        Members:
        reason -- The reason why the object couldn't be allocated.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::AllocationException'

    _M_IceGrid._t_AllocationException = IcePy.defineException('::IceGrid::AllocationException', AllocationException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    AllocationException._ice_type = _M_IceGrid._t_AllocationException

    _M_IceGrid.AllocationException = AllocationException
    del AllocationException

if 'AllocationTimeoutException' not in _M_IceGrid.__dict__:
    _M_IceGrid.AllocationTimeoutException = Ice.createTempClass()
    class AllocationTimeoutException(_M_IceGrid.AllocationException):
        """
        This exception is raised if the request to allocate an object times
        out.
        """
        def __init__(self, reason=''):
            _M_IceGrid.AllocationException.__init__(self, reason)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::AllocationTimeoutException'

    _M_IceGrid._t_AllocationTimeoutException = IcePy.defineException('::IceGrid::AllocationTimeoutException', AllocationTimeoutException, (), False, _M_IceGrid._t_AllocationException, ())
    AllocationTimeoutException._ice_type = _M_IceGrid._t_AllocationTimeoutException

    _M_IceGrid.AllocationTimeoutException = AllocationTimeoutException
    del AllocationTimeoutException

if 'PermissionDeniedException' not in _M_IceGrid.__dict__:
    _M_IceGrid.PermissionDeniedException = Ice.createTempClass()
    class PermissionDeniedException(Ice.UserException):
        """
        This exception is raised if a client is denied the ability to create
        a session with IceGrid.
        Members:
        reason -- The reason why permission was denied.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::PermissionDeniedException'

    _M_IceGrid._t_PermissionDeniedException = IcePy.defineException('::IceGrid::PermissionDeniedException', PermissionDeniedException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    PermissionDeniedException._ice_type = _M_IceGrid._t_PermissionDeniedException

    _M_IceGrid.PermissionDeniedException = PermissionDeniedException
    del PermissionDeniedException

if 'ObserverAlreadyRegisteredException' not in _M_IceGrid.__dict__:
    _M_IceGrid.ObserverAlreadyRegisteredException = Ice.createTempClass()
    class ObserverAlreadyRegisteredException(Ice.UserException):
        """
        This exception is raised if an observer is already registered with
        the registry.
        Members:
        id -- The identity of the observer.
        """
        def __init__(self, id=Ice._struct_marker):
            if id is Ice._struct_marker:
                self.id = _M_Ice.Identity()
            else:
                self.id = id

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::ObserverAlreadyRegisteredException'

    _M_IceGrid._t_ObserverAlreadyRegisteredException = IcePy.defineException('::IceGrid::ObserverAlreadyRegisteredException', ObserverAlreadyRegisteredException, (), False, None, (('id', (), _M_Ice._t_Identity, False, 0),))
    ObserverAlreadyRegisteredException._ice_type = _M_IceGrid._t_ObserverAlreadyRegisteredException

    _M_IceGrid.ObserverAlreadyRegisteredException = ObserverAlreadyRegisteredException
    del ObserverAlreadyRegisteredException

if 'FileNotAvailableException' not in _M_IceGrid.__dict__:
    _M_IceGrid.FileNotAvailableException = Ice.createTempClass()
    class FileNotAvailableException(Ice.UserException):
        """
        This exception is raised if a file is not available.
        Members:
        reason -- The reason for the failure.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'IceGrid::FileNotAvailableException'

    _M_IceGrid._t_FileNotAvailableException = IcePy.defineException('::IceGrid::FileNotAvailableException', FileNotAvailableException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    FileNotAvailableException._ice_type = _M_IceGrid._t_FileNotAvailableException

    _M_IceGrid.FileNotAvailableException = FileNotAvailableException
    del FileNotAvailableException

# End of module IceGrid

Ice.sliceChecksums["::IceGrid::AccessDeniedException"] = "e39e5ad60577c1e7b52e190e1d906b"
Ice.sliceChecksums["::IceGrid::AdapterNotExistException"] = "cee552cb69227f723030cd78b0cccc97"
Ice.sliceChecksums["::IceGrid::AllocationException"] = "ea85a8e5e5f281709bf6aa88d742"
Ice.sliceChecksums["::IceGrid::AllocationTimeoutException"] = "6695f5713499ac6de0626277e167f553"
Ice.sliceChecksums["::IceGrid::ApplicationNotExistException"] = "93fdaabe25dcf75485ffd4972223610"
Ice.sliceChecksums["::IceGrid::BadSignalException"] = "13e67e2d3f46a84aa73fd56d5812caf1"
Ice.sliceChecksums["::IceGrid::DeploymentException"] = "e316fdba8e93ef72d58bd61bbfe29e4"
Ice.sliceChecksums["::IceGrid::FileNotAvailableException"] = "a3e88ae3be93ecd4c82797ad26d6076"
Ice.sliceChecksums["::IceGrid::NodeNotExistException"] = "f07ddace1aa3cb1bbed37c3fbf862dff"
Ice.sliceChecksums["::IceGrid::NodeUnreachableException"] = "8f894a5022704f4dde30bb2a3ea326f9"
Ice.sliceChecksums["::IceGrid::ObjectExistsException"] = "833f69d3ebc872974a9f096352d2ddb"
Ice.sliceChecksums["::IceGrid::ObjectNotRegisteredException"] = "cb181c92b4dfb6e6b97f4ca806899e7"
Ice.sliceChecksums["::IceGrid::ObserverAlreadyRegisteredException"] = "e1267578f9666e2bda9952d7106fd12c"
Ice.sliceChecksums["::IceGrid::PatchException"] = "c28994d76c834b99b94cf4535a13d3"
Ice.sliceChecksums["::IceGrid::PermissionDeniedException"] = "27def8d4569ab203b629b9162d530ba"
Ice.sliceChecksums["::IceGrid::RegistryNotExistException"] = "9e1c1b717e9c5ef72886f16dbfce56f"
Ice.sliceChecksums["::IceGrid::RegistryUnreachableException"] = "514020cac28c588ae487a628e227699"
Ice.sliceChecksums["::IceGrid::ServerNotExistException"] = "6df151f3ce87bd522ed095f7ad97a941"
Ice.sliceChecksums["::IceGrid::ServerStartException"] = "ce92acafa218dd1d1e8aafab20d1"
Ice.sliceChecksums["::IceGrid::ServerStopException"] = "edb57abb5393b8b31b41f3a8e5bd111"
Ice.sliceChecksums["::IceGrid::ServerUnreachableException"] = "f3233583ef7ad8eac2f961aedafdd64"
