# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `ROMIO.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import omero_ServerErrors_ice
import omero_Collections_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.romio
_M_omero.romio = Ice.openModule('omero.romio')
__name__ = 'omero.romio'
_M_omero.romio.__doc__ = """
Primitives for working with binary data.
"""

if '_t_RGBBands' not in _M_omero.romio.__dict__:
    _M_omero.romio._t_RGBBands = IcePy.defineSequence('::omero::romio::RGBBands', (), _M_Ice._t_ByteSeq)

_M_omero.romio.RedBand = 0

_M_omero.romio.GreenBand = 1

_M_omero.romio.BlueBand = 2

if 'RGBBuffer' not in _M_omero.romio.__dict__:
    _M_omero.romio.RGBBuffer = Ice.createTempClass()
    class RGBBuffer(Ice.Object):
        def __init__(self, bands=None, sizeX1=0, sizeX2=0):
            self.bands = bands
            self.sizeX1 = sizeX1
            self.sizeX2 = sizeX2

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::romio::RGBBuffer')

        def ice_id(self, current=None):
            return '::omero::romio::RGBBuffer'

        def ice_staticId():
            return '::omero::romio::RGBBuffer'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.romio._t_RGBBuffer)

        __repr__ = __str__

    _M_omero.romio.RGBBufferPrx = Ice.createTempClass()
    class RGBBufferPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.romio.RGBBufferPrx.ice_checkedCast(proxy, '::omero::romio::RGBBuffer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.romio.RGBBufferPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::omero::romio::RGBBuffer'
        ice_staticId = staticmethod(ice_staticId)

    _M_omero.romio._t_RGBBufferPrx = IcePy.defineProxy('::omero::romio::RGBBuffer', RGBBufferPrx)

    _M_omero.romio._t_RGBBuffer = IcePy.defineClass('::omero::romio::RGBBuffer', RGBBuffer, -1, (), False, False, None, (), (
        ('bands', (), _M_omero.romio._t_RGBBands, False, 0),
        ('sizeX1', (), IcePy._t_int, False, 0),
        ('sizeX2', (), IcePy._t_int, False, 0)
    ))
    RGBBuffer._ice_type = _M_omero.romio._t_RGBBuffer

    _M_omero.romio.RGBBuffer = RGBBuffer
    del RGBBuffer

    _M_omero.romio.RGBBufferPrx = RGBBufferPrx
    del RGBBufferPrx

if 'RegionDef' not in _M_omero.romio.__dict__:
    _M_omero.romio.RegionDef = Ice.createTempClass()
    class RegionDef(Ice.Object):
        def __init__(self, x=0, y=0, width=0, height=0):
            self.x = x
            self.y = y
            self.width = width
            self.height = height

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::romio::RegionDef')

        def ice_id(self, current=None):
            return '::omero::romio::RegionDef'

        def ice_staticId():
            return '::omero::romio::RegionDef'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.romio._t_RegionDef)

        __repr__ = __str__

    _M_omero.romio.RegionDefPrx = Ice.createTempClass()
    class RegionDefPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.romio.RegionDefPrx.ice_checkedCast(proxy, '::omero::romio::RegionDef', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.romio.RegionDefPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::omero::romio::RegionDef'
        ice_staticId = staticmethod(ice_staticId)

    _M_omero.romio._t_RegionDefPrx = IcePy.defineProxy('::omero::romio::RegionDef', RegionDefPrx)

    _M_omero.romio._t_RegionDef = IcePy.defineClass('::omero::romio::RegionDef', RegionDef, -1, (), False, False, None, (), (
        ('x', (), IcePy._t_int, False, 0),
        ('y', (), IcePy._t_int, False, 0),
        ('width', (), IcePy._t_int, False, 0),
        ('height', (), IcePy._t_int, False, 0)
    ))
    RegionDef._ice_type = _M_omero.romio._t_RegionDef

    _M_omero.romio.RegionDef = RegionDef
    del RegionDef

    _M_omero.romio.RegionDefPrx = RegionDefPrx
    del RegionDefPrx

_M_omero.romio.XY = 0

_M_omero.romio.ZY = 1

_M_omero.romio.XZ = 2

if 'PlaneDef' not in _M_omero.romio.__dict__:
    _M_omero.romio.PlaneDef = Ice.createTempClass()
    class PlaneDef(Ice.Object):
        def __init__(self, slice=0, x=0, y=0, z=0, t=0, region=None, stride=0):
            self.slice = slice
            self.x = x
            self.y = y
            self.z = z
            self.t = t
            self.region = region
            self.stride = stride

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::romio::PlaneDef')

        def ice_id(self, current=None):
            return '::omero::romio::PlaneDef'

        def ice_staticId():
            return '::omero::romio::PlaneDef'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.romio._t_PlaneDef)

        __repr__ = __str__

    _M_omero.romio.PlaneDefPrx = Ice.createTempClass()
    class PlaneDefPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.romio.PlaneDefPrx.ice_checkedCast(proxy, '::omero::romio::PlaneDef', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.romio.PlaneDefPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::omero::romio::PlaneDef'
        ice_staticId = staticmethod(ice_staticId)

    _M_omero.romio._t_PlaneDefPrx = IcePy.defineProxy('::omero::romio::PlaneDef', PlaneDefPrx)

    _M_omero.romio._t_PlaneDef = IcePy.declareClass('::omero::romio::PlaneDef')

    _M_omero.romio._t_PlaneDef = IcePy.defineClass('::omero::romio::PlaneDef', PlaneDef, -1, (), False, False, None, (), (
        ('slice', (), IcePy._t_int, False, 0),
        ('x', (), IcePy._t_int, False, 0),
        ('y', (), IcePy._t_int, False, 0),
        ('z', (), IcePy._t_int, False, 0),
        ('t', (), IcePy._t_int, False, 0),
        ('region', (), _M_omero.romio._t_RegionDef, False, 0),
        ('stride', (), IcePy._t_int, False, 0)
    ))
    PlaneDef._ice_type = _M_omero.romio._t_PlaneDef

    _M_omero.romio.PlaneDef = PlaneDef
    del PlaneDef

    _M_omero.romio.PlaneDefPrx = PlaneDefPrx
    del PlaneDefPrx

if 'PlaneDefWithMasks' not in _M_omero.romio.__dict__:
    _M_omero.romio.PlaneDefWithMasks = Ice.createTempClass()
    class PlaneDefWithMasks(_M_omero.romio.PlaneDef):
        """
        Extends PlaneDef by an option to toggle server side Mask rendering. By
        default all masks attached to the image fulfilling rendering criteria,
        will be rendered. This criteria is currently masks with a width and
        height equal to those of the image.
        Members:
        shapeIds -- Optional (currently unimplemented) list of Masks to render.
        """
        def __init__(self, slice=0, x=0, y=0, z=0, t=0, region=None, stride=0, shapeIds=None):
            _M_omero.romio.PlaneDef.__init__(self, slice, x, y, z, t, region, stride)
            self.shapeIds = shapeIds

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::romio::PlaneDef', '::omero::romio::PlaneDefWithMasks')

        def ice_id(self, current=None):
            return '::omero::romio::PlaneDefWithMasks'

        def ice_staticId():
            return '::omero::romio::PlaneDefWithMasks'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.romio._t_PlaneDefWithMasks)

        __repr__ = __str__

    _M_omero.romio.PlaneDefWithMasksPrx = Ice.createTempClass()
    class PlaneDefWithMasksPrx(_M_omero.romio.PlaneDefPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.romio.PlaneDefWithMasksPrx.ice_checkedCast(proxy, '::omero::romio::PlaneDefWithMasks', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.romio.PlaneDefWithMasksPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::omero::romio::PlaneDefWithMasks'
        ice_staticId = staticmethod(ice_staticId)

    _M_omero.romio._t_PlaneDefWithMasksPrx = IcePy.defineProxy('::omero::romio::PlaneDefWithMasks', PlaneDefWithMasksPrx)

    _M_omero.romio._t_PlaneDefWithMasks = IcePy.declareClass('::omero::romio::PlaneDefWithMasks')

    _M_omero.romio._t_PlaneDefWithMasks = IcePy.defineClass('::omero::romio::PlaneDefWithMasks', PlaneDefWithMasks, -1, (), False, False, _M_omero.romio._t_PlaneDef, (), (('shapeIds', (), _M_omero.api._t_LongList, False, 0),))
    PlaneDefWithMasks._ice_type = _M_omero.romio._t_PlaneDefWithMasks

    _M_omero.romio.PlaneDefWithMasks = PlaneDefWithMasks
    del PlaneDefWithMasks

    _M_omero.romio.PlaneDefWithMasksPrx = PlaneDefWithMasksPrx
    del PlaneDefWithMasksPrx

if 'CodomainMapContext' not in _M_omero.romio.__dict__:
    _M_omero.romio.CodomainMapContext = Ice.createTempClass()
    class CodomainMapContext(Ice.Object):
        def __init__(self):
            pass

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::romio::CodomainMapContext')

        def ice_id(self, current=None):
            return '::omero::romio::CodomainMapContext'

        def ice_staticId():
            return '::omero::romio::CodomainMapContext'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.romio._t_CodomainMapContext)

        __repr__ = __str__

    _M_omero.romio.CodomainMapContextPrx = Ice.createTempClass()
    class CodomainMapContextPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.romio.CodomainMapContextPrx.ice_checkedCast(proxy, '::omero::romio::CodomainMapContext', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.romio.CodomainMapContextPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::omero::romio::CodomainMapContext'
        ice_staticId = staticmethod(ice_staticId)

    _M_omero.romio._t_CodomainMapContextPrx = IcePy.defineProxy('::omero::romio::CodomainMapContext', CodomainMapContextPrx)

    _M_omero.romio._t_CodomainMapContext = IcePy.defineClass('::omero::romio::CodomainMapContext', CodomainMapContext, -1, (), False, False, None, (), ())
    CodomainMapContext._ice_type = _M_omero.romio._t_CodomainMapContext

    _M_omero.romio.CodomainMapContext = CodomainMapContext
    del CodomainMapContext

    _M_omero.romio.CodomainMapContextPrx = CodomainMapContextPrx
    del CodomainMapContextPrx

if 'ReverseIntensityMapContext' not in _M_omero.romio.__dict__:
    _M_omero.romio.ReverseIntensityMapContext = Ice.createTempClass()
    class ReverseIntensityMapContext(_M_omero.romio.CodomainMapContext):
        """
        The reverse intensity.
        """
        def __init__(self):
            _M_omero.romio.CodomainMapContext.__init__(self)

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::romio::CodomainMapContext', '::omero::romio::ReverseIntensityMapContext')

        def ice_id(self, current=None):
            return '::omero::romio::ReverseIntensityMapContext'

        def ice_staticId():
            return '::omero::romio::ReverseIntensityMapContext'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.romio._t_ReverseIntensityMapContext)

        __repr__ = __str__

    _M_omero.romio.ReverseIntensityMapContextPrx = Ice.createTempClass()
    class ReverseIntensityMapContextPrx(_M_omero.romio.CodomainMapContextPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.romio.ReverseIntensityMapContextPrx.ice_checkedCast(proxy, '::omero::romio::ReverseIntensityMapContext', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.romio.ReverseIntensityMapContextPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::omero::romio::ReverseIntensityMapContext'
        ice_staticId = staticmethod(ice_staticId)

    _M_omero.romio._t_ReverseIntensityMapContextPrx = IcePy.defineProxy('::omero::romio::ReverseIntensityMapContext', ReverseIntensityMapContextPrx)

    _M_omero.romio._t_ReverseIntensityMapContext = IcePy.defineClass('::omero::romio::ReverseIntensityMapContext', ReverseIntensityMapContext, -1, (), False, False, _M_omero.romio._t_CodomainMapContext, (), ())
    ReverseIntensityMapContext._ice_type = _M_omero.romio._t_ReverseIntensityMapContext

    _M_omero.romio.ReverseIntensityMapContext = ReverseIntensityMapContext
    del ReverseIntensityMapContext

    _M_omero.romio.ReverseIntensityMapContextPrx = ReverseIntensityMapContextPrx
    del ReverseIntensityMapContextPrx

# End of module omero.romio

__name__ = 'omero'

# End of module omero
