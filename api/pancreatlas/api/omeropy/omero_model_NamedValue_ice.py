# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `NamedValue.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module omero
_M_omero = Ice.openModule('omero')
__name__ = 'omero'

# Start of module omero.model
_M_omero.model = Ice.openModule('omero.model')
__name__ = 'omero.model'

if 'NamedValue' not in _M_omero.model.__dict__:
    _M_omero.model.NamedValue = Ice.createTempClass()
    class NamedValue(Ice.Object):
        """
        Simple Pair-like container which is
        used in a sequence to support ordered maps.
        """
        def __init__(self, name='', value=''):
            self.name = name
            self.value = value

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::NamedValue')

        def ice_id(self, current=None):
            return '::omero::model::NamedValue'

        def ice_staticId():
            return '::omero::model::NamedValue'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_NamedValue)

        __repr__ = __str__

    _M_omero.model.NamedValuePrx = Ice.createTempClass()
    class NamedValuePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.NamedValuePrx.ice_checkedCast(proxy, '::omero::model::NamedValue', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.NamedValuePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::omero::model::NamedValue'
        ice_staticId = staticmethod(ice_staticId)

    _M_omero.model._t_NamedValuePrx = IcePy.defineProxy('::omero::model::NamedValue', NamedValuePrx)

    _M_omero.model._t_NamedValue = IcePy.defineClass('::omero::model::NamedValue', NamedValue, -1, (), False, False, None, (), (
        ('name', (), IcePy._t_string, False, 0),
        ('value', (), IcePy._t_string, False, 0)
    ))
    NamedValue._ice_type = _M_omero.model._t_NamedValue

    _M_omero.model.NamedValue = NamedValue
    del NamedValue

    _M_omero.model.NamedValuePrx = NamedValuePrx
    del NamedValuePrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
